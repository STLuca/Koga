parser machine;

Array<Usable T> {

    byte[4] size;
    byte[4] start;
    byte[4] step;
    byte[0] data;

    constructor() {}

    constructor(b12 imm) {
        i(ADD, II, LDA, size, IL, 0d0, AL, imm);
        i(ADD, II, LDA, step, IL, 0d0, LG, T);
        byte[AL imm][LG T] data;
        i(ADD, LI, LDA, start, R, task, LDA, data);
    }

    constructor fromBytes(Name const) {
        Symbol(CONST, constSymbol, AL, const);
        c(ADDR, LI, start, table, constSymbol);
        c(SIZE, LI, size, table, constSymbol);
        i(ADD, II, LDA, step, IL, 0d0, LG, T);
    }

    constructor dynamic(Usable mc, Int x) {
        i(ADD, TI, LDA, size, ADA, x.val, IL, 0d0);
        math(MULT, TT, size, size, mc.size);
        i(ADD, TI, LDA, step, ADA, mc.size, IL, 0d0);
        i(ADD, LI, LDA, start, R, task, LDA, start);
        Admin(ALLOCATE, start, size);
    }

}